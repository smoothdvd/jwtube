/*** Plugin that can help make a callback from embbed page.**/package com.plugins.callback {import flash.display.*;import flash.text.*;import flash.net.*;import flash.events.*;import flash.geom.Rectangle;import flash.geom.Point;import flash.external.*;import flash.system.System;import com.jeroenwijering.events.*;public class Callback extends MovieClip implements PluginInterface {	/** Reference to the View of the player. **/	private var view:AbstractView;	/** Reference to the graphics. **/	private var clip:MovieClip;	private var shareSp:Sprite;	private var imageLoader:Loader;	private var shareUrlLabel:TextField;	private var shareUrlText:TextField;	private var embedLabel:TextField;	private var embedText:TextField;	private var highlightArea:Shape;	private var recommentXML:XML;	private var imgArray;	private var titleArray;	private var linkArray;	private var imgBitmap:Array = []	private var imagethumb_height = 0;	/** initialize call for backward compatibility. **/	public var initialize:Function = initializePlugin;		/** set iscallback to false, so we can avoid send duplicate view count **/	private var iscallbacked = false;		/** Constructor; nothing going on. **/	public function Callback() {		};		/** The initialize call is invoked by the player View. **/	public function initializePlugin(vw:AbstractView):void {		view = vw;				//load thumb image to player		imageLoader = new Loader();		var theURL:String = view.playlist[view.config['item']]['image'];		imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, imageLoadComplete);		var imageRequest:URLRequest = new URLRequest(theURL);		imageLoader.load(imageRequest);					//load recomment video from xml stream		var XMLloader:URLLoader = new URLLoader();		var request:URLRequest = new URLRequest("images.xml");		XMLloader.load(request);		XMLloader.addEventListener(Event.COMPLETE, XMLloaderComplete);					view.addControllerListener(ControllerEvent.RESIZE,resizeHandler);		view.addModelListener(ModelEvent.STATE,stateHandler);		resizeHandler();	};		private function XMLloaderComplete(event:Event):void {		var loader:URLLoader = event.target as URLLoader;		if (loader != null) {			recommentXML = new XML(loader.data);			//new array to store the path to the images 			imgArray = new Array();			titleArray = new Array();			linkArray = new Array();			var imageLoader = new Loader();			var imageRequest:URLRequest;			//when the xml load this is called 			//loop for the number of nodes inside the xml			//xml formate is same as 3.16			for (var i = 0; i < recommentXML.child("recommendation").length(); i++) { 				//populate the imgArray with the images 				imgArray[i] = recommentXML.child("recommendation")[i].child("image");				titleArray[i] = recommentXML.child("recommendation")[i].child("title");				linkArray[i] = recommentXML.child("recommendation")[i].child("link");								imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, imgArrayLoadComplete);				imageRequest = new URLRequest(imgArray[0]);				imageLoader.load(imageRequest);			}		}			}		private function imageLoadComplete(event:Event):void {		var loader:Loader = Loader(event.target.loader);        var image:Bitmap = Bitmap(loader.content);		image.smoothing = true;		image.width = view.config['width']-210;		image.height = image.width*0.75;				image.x = 20;		image.y = 20;		imagethumb_height = image.height;		trace(imagethumb_height);	}		private function imgArrayLoadComplete(event:Event):void {		var loader:Loader = Loader(event.target.loader);        var image:Bitmap = Bitmap(loader.content);		image.smoothing = true;		imgBitmap.push(image);	}		/** fired when the Share Url is clicked **/	private function clickSelectCopyHandler(evt:MouseEvent=null) {		var tf:TextField = TextField(evt.currentTarget);		tf.setSelection(0, tf.text.length);		System.setClipboard(tf.text);	};		/** Handle a resize. **/	private function resizeHandler(evt:ControllerEvent=undefined) {		if (highlightArea != null) {			highlightArea.width = view.config['width'];			highlightArea.height = view.config['height'];			shareUrlLabel.x = shareUrlText.x = embedLabel.x = embedText.x = view.config['width'] - 180;			shareUrlLabel.y = 20;			shareUrlText.y = shareUrlLabel.y + shareUrlLabel.height + 5;			embedLabel.y = shareUrlText.y + shareUrlLabel.height + 5;			embedText.y = embedLabel.y + embedLabel.height + 5;			var image:Bitmap = Bitmap(imageLoader.content);			image.smoothing = true;			image.width = view.config['width']-210;			image.height = image.width*0.75;						image.x = 20;			image.y = 20;		}	};		private function stateHandler(evt:ModelEvent):void {    	// Do something here when the STATE has Changed.		switch(evt.data.newstate) {			case ModelStates.BUFFERING:				if (shareSp != null) {					shareSp.visible = false;				}				break;			case ModelStates.PLAYING:				//add hard code of callback				if (shareSp != null) {					shareSp.visible = false;				}								if ( !iscallbacked ) {					iscallbacked = true;					var myData:URLRequest = new URLRequest("http://v.rjhz.com.cn/watchcallback");					myData.method = URLRequestMethod.POST;					var variables:URLVariables = new URLVariables();					variables.file = view.playlist[view.config['item']]['file'];					variables.state = "start";					variables.externallink = String( ExternalInterface.call(" function(){ return document.location.href.toString();}"));					myData.data = variables;					var loader:URLLoader = new URLLoader();					loader.dataFormat = URLLoaderDataFormat.VARIABLES;					loader.load(myData);				}				break;			case ModelStates.COMPLETED:				shareUrlLabel = new TextField();				shareUrlText = new TextField();				embedLabel = new TextField();				embedText = new TextField();				highlightArea = new Shape();				//get filename part, my own filename formate: */xxxxxxxxxxx.flv				var filename:String = view.playlist[view.config['item']]['file'];				filename = filename.substr(filename.lastIndexOf("/")+1, filename.lastIndexOf(".")-filename.lastIndexOf("/")-1);				//add backgroud to player				highlightArea.graphics.beginFill(0x000000, 0.7);				highlightArea.graphics.lineStyle(0);				highlightArea.graphics.drawRect(0, 0, view.config['width'], view.config['height']);				highlightArea.graphics.endFill();				//add url lable to player				shareUrlLabel.x = view.config['width'] - 180;				shareUrlLabel.y = 20;				shareUrlLabel.height = 20;				shareUrlLabel.text = "链接";				shareUrlLabel.selectable = false;				shareUrlLabel.textColor = 0xFFFFFF;				var shareUrlLabel_txtfmt:TextFormat = new TextFormat();				shareUrlLabel_txtfmt.size = 12;				shareUrlLabel_txtfmt.font = "_sans";				shareUrlLabel.setTextFormat(shareUrlLabel_txtfmt);				//add url text field to player				shareUrlText.width = 160;				shareUrlText.height = 20;				shareUrlText.x = view.config['width'] - 20 - shareUrlText.width;				shareUrlText.y = shareUrlLabel.y + shareUrlLabel.height + 5;				//my video watch page's url				shareUrlText.text = "http://v.rjhz.com.cn/watch?v=" + filename;				var shareUrlText_txtfmt:TextFormat = new TextFormat();				shareUrlText_txtfmt.size = 12;				shareUrlText_txtfmt.font = "_sans";				shareUrlText.setTextFormat(shareUrlText_txtfmt);				shareUrlText.background = true;				shareUrlText.backgroundColor = 0xDDDDDD;				shareUrlText.addEventListener(MouseEvent.CLICK,clickSelectCopyHandler)				shareUrlText.addEventListener(MouseEvent.MOUSE_UP,clickSelectCopyHandler)				//add embed lable to player				embedLabel.x = view.config['width'] - 180;				embedLabel.y = shareUrlText.y + shareUrlLabel.height + 5;				embedLabel.height = 20;				embedLabel.text = "分享";				embedLabel.selectable = false;				embedLabel.textColor = 0xFFFFFF;				var embedLabel_txtfmt:TextFormat = new TextFormat();				embedLabel_txtfmt.size = 12;				embedLabel_txtfmt.font = "_sans";				embedLabel.setTextFormat(embedLabel_txtfmt);				//add embed text field to player				embedText.width = 160;				embedText.height = 40;				embedText.x = view.config['width'] - 20 - embedText.width;				embedText.y = embedLabel.y + embedLabel.height + 5;				//my embed code				embedText.text = '<object width="448" height="356"><param name="movie" value="http://v.rjhz.com.cn/play/' + filename + '.swf"></param><param name="wmode" value="transparent"></param><param name="allowscriptaccess" value="always"></param><param name="allowfullscreen" value="true"></param><param name="quality" value="high"></param><param name="bgcolor" value="#000000"></param><embed allowscriptaccess="always" allowfullscreen="true" quality="high" bgcolor="#000000" src="http://www.jz-life.com/play/' + filename + '.swf" type="application/x-shockwave-flash" wmode="transparent" width="448" height="356"></embed></object>';				var embedText_txtfmt:TextFormat = new TextFormat();				embedText_txtfmt.size = 12;				embedText_txtfmt.font = "_sans";				embedText.wordWrap = true;				embedText.setTextFormat(embedText_txtfmt);				embedText.background = true;				embedText.backgroundColor = 0xDDDDDD;				embedText.addEventListener(MouseEvent.CLICK,clickSelectCopyHandler)				embedText.addEventListener(MouseEvent.MOUSE_UP,clickSelectCopyHandler)				shareSp = new Sprite();				shareSp.addChild(highlightArea);				shareSp.addChild(imageLoader);				shareSp.addChild(shareUrlLabel);				shareSp.addChild(shareUrlText);				shareSp.addChild(embedLabel);				shareSp.addChild(embedText);								//Show the recomment video thumb, not finished				/*				var imagethumb:Bitmap = Bitmap(imageLoader.content);				imgBitmap[0].height = view.config['height'] - 20 - imagethumb_height - 10 - 20;				trace(imagethumb_height);				imgBitmap[0].width = imgBitmap[0].height / 0.75;				imgBitmap[0].x = 20;				imgBitmap[0].y = 20 +  imageLoader.height + 10;								shareSp.addChild(imgBitmap[0]);				*/				addChild(shareSp);  				break;		}	};}}